import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from prophet import Prophet
from groq import Groq
from dotenv import load_dotenv
import os

# Load API key securely
load_dotenv()
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
if not GROQ_API_KEY:
    st.error("\U0001F6A8 API Key is missing! Set it in Streamlit Secrets or a .env file.")
    st.stop()

# Streamlit UI
st.set_page_config(page_title="AI Forecasting Agent", page_icon="üìà", layout="wide")
st.title("üìà Revenue Forecasting using Prophet")

# File uploader
uploaded_file = st.file_uploader("Upload your Excel file with 'Date' and 'Revenue' columns", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)
        st.write("### Uploaded Data Preview", df.head())

        # Check required columns
        if not {'Date', 'Revenue'}.issubset(df.columns):
            st.error("Uploaded file must contain 'Date' and 'Revenue' columns.")
            st.stop()

        # Prepare data for Prophet
        df_prophet = df.rename(columns={"Date": "ds", "Revenue": "y"})
        df_prophet['ds'] = pd.to_datetime(df_prophet['ds'])

        # Forecasting with Prophet
        model = Prophet()
        model.fit(df_prophet)

        future = model.make_future_dataframe(periods=12, freq='M')
        forecast = model.predict(future)

        # Plot forecast
        st.write("### Forecast Plot")
        fig1 = model.plot(forecast)
        st.pyplot(fig1)

        # Show forecast data
        st.write("### Forecast Data", forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(12))

        # AI Commentary
        st.subheader("ü§ñ AI-Generated Forecast Commentary")
        client = Groq(api_key=GROQ_API_KEY)

        prompt = f"""
        You are the Head of FP&A at an IT-software engineering company. Analyze the following time series forecast results generated by Prophet and provide:
        - Key trends and seasonal patterns.
        - Risks or anomalies in revenue forecast.
        - CFO-ready summary using the Pyramid Principle.
        - Actionable recommendations to improve revenue forecasting.
        Here is the forecast data in JSON:
        {forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(24).to_json(orient='records')}
        """

        response = client.chat.completions.create(
            messages=[
                {"role": "system", "content": "You are a financial planning and analysis (FP&A) expert, specializing in SaaS companies."},
                {"role": "user", "content": prompt}
            ],
            model="llama3-8b-8192",
        )

        ai_commentary = response.choices[0].message.content

        st.markdown('<div class="analysis-container">', unsafe_allow_html=True)
        st.subheader("üìñ AI-Generated Commentary")
        st.write(ai_commentary)
        st.markdown('</div>', unsafe_allow_html=True)

    except Exception as e:
        st.error(f"‚ùå Error processing file: {e}")

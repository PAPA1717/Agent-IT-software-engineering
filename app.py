import streamlit as st
import pandas as pd
import numpy as np
from prophet import Prophet
import matplotlib.pyplot as plt
import os
from dotenv import load_dotenv
from groq import Groq

# Load environment variables
load_dotenv()
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

if not GROQ_API_KEY:
    st.error("🚨 API Key is missing! Set it in Streamlit Secrets or a .env file.")
    st.stop()

# Streamlit Page Config
st.set_page_config(page_title="📈 Revenue Forecasting AI Agent", page_icon="🤖", layout="wide")

# Page Header
st.title("🤖 AI Revenue Forecasting Agent")
st.markdown("Upload an Excel file with `Date` and `Revenue` columns to forecast future revenues using Prophet.")

# File Upload
uploaded_file = st.file_uploader("Upload Excel File", type=["xlsx", "xls"])

if uploaded_file is not None:
    try:
        df = pd.read_excel(uploaded_file)
        st.success("✅ File uploaded successfully!")

        # Check required columns
        if "Date" not in df.columns or "Revenue" not in df.columns:
            st.error("🚨 Excel file must contain 'Date' and 'Revenue' columns.")
        else:
            df['Date'] = pd.to_datetime(df['Date'])
            df = df.rename(columns={"Date": "ds", "Revenue": "y"})

            # Show input data
            st.subheader("📊 Input Data")
            st.dataframe(df)

            # Fit Prophet model
            model = Prophet()
            model.fit(df)

            # Forecast into the future
            future_periods = st.slider("Select forecast period (months)", 1, 36, 12)
            future = model.make_future_dataframe(periods=future_periods * 30)
            forecast = model.predict(future)

            # Plot forecast
            st.subheader("📈 Forecast Plot")
            fig1 = model.plot(forecast)
            st.pyplot(fig1)

            # Display forecast table
            st.subheader("📋 Forecast Data")
            st.dataframe(forecast[["ds", "yhat", "yhat_lower", "yhat_upper"]].tail(future_periods))

            # AI Commentary
            st.subheader("🧠 AI-Generated Forecast Commentary")
            client = Groq(api_key=GROQ_API_KEY)

            ai_prompt = f"""
            You are a financial forecasting expert. Analyze the following forecast data generated by Prophet. Provide:
            - Key trends observed
            - Business insights from forecast
            - Seasonality or trends observed
            - Key risks 
            - A concise CFO-style actionable summary 

            Forecast data:
            {forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(future_periods).to_json(orient='records')}
            """

            response = client.chat.completions.create(
                messages=[
                    {"role": "system", "content": "You are a financial forecasting expert specializing in time series analysis."},
                    {"role": "user", "content": ai_prompt}
                ],
                model="llama3-8b-8192"
            )

            ai_comment = response.choices[0].message.content
            st.markdown(ai_comment)

    except Exception as e:
        st.error(f"❌ Error reading file: {e}")
else:
    st.info("📂 Please upload an Excel file to begin.")
